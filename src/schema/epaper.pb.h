// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epaper.proto

#ifndef PROTOBUF_epaper_2eproto__INCLUDED
#define PROTOBUF_epaper_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_epaper_2eproto();
void protobuf_AssignDesc_epaper_2eproto();
void protobuf_ShutdownFile_epaper_2eproto();

class Document;
class Document_Links;
class Document_Name;
class Document_Name_Language;
class Document_Sales;
class Document_Requests;

// ===================================================================

class Document_Links : public ::google::protobuf::Message {
 public:
  Document_Links();
  virtual ~Document_Links();
  
  Document_Links(const Document_Links& from);
  
  inline Document_Links& operator=(const Document_Links& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Document_Links& default_instance();
  
  void Swap(Document_Links* other);
  
  // implements Message ----------------------------------------------
  
  Document_Links* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document_Links& from);
  void MergeFrom(const Document_Links& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int64 Backward = 3;
  inline int backward_size() const;
  inline void clear_backward();
  static const int kBackwardFieldNumber = 3;
  inline ::google::protobuf::int64 backward(int index) const;
  inline void set_backward(int index, ::google::protobuf::int64 value);
  inline void add_backward(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      backward() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_backward();
  
  // repeated int64 Forward = 4;
  inline int forward_size() const;
  inline void clear_forward();
  static const int kForwardFieldNumber = 4;
  inline ::google::protobuf::int64 forward(int index) const;
  inline void set_forward(int index, ::google::protobuf::int64 value);
  inline void add_forward(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      forward() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_forward();
  
  // @@protoc_insertion_point(class_scope:Document.Links)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > backward_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > forward_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_epaper_2eproto();
  friend void protobuf_AssignDesc_epaper_2eproto();
  friend void protobuf_ShutdownFile_epaper_2eproto();
  
  void InitAsDefaultInstance();
  static Document_Links* default_instance_;
};
// -------------------------------------------------------------------

class Document_Name_Language : public ::google::protobuf::Message {
 public:
  Document_Name_Language();
  virtual ~Document_Name_Language();
  
  Document_Name_Language(const Document_Name_Language& from);
  
  inline Document_Name_Language& operator=(const Document_Name_Language& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Document_Name_Language& default_instance();
  
  void Swap(Document_Name_Language* other);
  
  // implements Message ----------------------------------------------
  
  Document_Name_Language* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document_Name_Language& from);
  void MergeFrom(const Document_Name_Language& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string Code = 7;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 7;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  
  // optional string Country = 8;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 8;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  
  // @@protoc_insertion_point(class_scope:Document.Name.Language)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_country();
  inline void clear_has_country();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* code_;
  ::std::string* country_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_epaper_2eproto();
  friend void protobuf_AssignDesc_epaper_2eproto();
  friend void protobuf_ShutdownFile_epaper_2eproto();
  
  void InitAsDefaultInstance();
  static Document_Name_Language* default_instance_;
};
// -------------------------------------------------------------------

class Document_Name : public ::google::protobuf::Message {
 public:
  Document_Name();
  virtual ~Document_Name();
  
  Document_Name(const Document_Name& from);
  
  inline Document_Name& operator=(const Document_Name& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Document_Name& default_instance();
  
  void Swap(Document_Name* other);
  
  // implements Message ----------------------------------------------
  
  Document_Name* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document_Name& from);
  void MergeFrom(const Document_Name& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Document_Name_Language Language;
  
  // accessors -------------------------------------------------------
  
  // repeated group Language = 6 {
  inline int language_size() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 6;
  inline const ::Document_Name_Language& language(int index) const;
  inline ::Document_Name_Language* mutable_language(int index);
  inline ::Document_Name_Language* add_language();
  inline const ::google::protobuf::RepeatedPtrField< ::Document_Name_Language >&
      language() const;
  inline ::google::protobuf::RepeatedPtrField< ::Document_Name_Language >*
      mutable_language();
  
  // optional string Url = 9;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 9;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // @@protoc_insertion_point(class_scope:Document.Name)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Document_Name_Language > language_;
  ::std::string* url_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_epaper_2eproto();
  friend void protobuf_AssignDesc_epaper_2eproto();
  friend void protobuf_ShutdownFile_epaper_2eproto();
  
  void InitAsDefaultInstance();
  static Document_Name* default_instance_;
};
// -------------------------------------------------------------------

class Document_Sales : public ::google::protobuf::Message {
 public:
  Document_Sales();
  virtual ~Document_Sales();
  
  Document_Sales(const Document_Sales& from);
  
  inline Document_Sales& operator=(const Document_Sales& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Document_Sales& default_instance();
  
  void Swap(Document_Sales* other);
  
  // implements Message ----------------------------------------------
  
  Document_Sales* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document_Sales& from);
  void MergeFrom(const Document_Sales& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 productId = 17;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductIdFieldNumber = 17;
  inline ::google::protobuf::int32 productid() const;
  inline void set_productid(::google::protobuf::int32 value);
  
  // required string productName = 18;
  inline bool has_productname() const;
  inline void clear_productname();
  static const int kProductNameFieldNumber = 18;
  inline const ::std::string& productname() const;
  inline void set_productname(const ::std::string& value);
  inline void set_productname(const char* value);
  inline void set_productname(const char* value, size_t size);
  inline ::std::string* mutable_productname();
  inline ::std::string* release_productname();
  
  // required int32 sale = 19;
  inline bool has_sale() const;
  inline void clear_sale();
  static const int kSaleFieldNumber = 19;
  inline ::google::protobuf::int32 sale() const;
  inline void set_sale(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Document.Sales)
 private:
  inline void set_has_productid();
  inline void clear_has_productid();
  inline void set_has_productname();
  inline void clear_has_productname();
  inline void set_has_sale();
  inline void clear_has_sale();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* productname_;
  ::google::protobuf::int32 productid_;
  ::google::protobuf::int32 sale_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_epaper_2eproto();
  friend void protobuf_AssignDesc_epaper_2eproto();
  friend void protobuf_ShutdownFile_epaper_2eproto();
  
  void InitAsDefaultInstance();
  static Document_Sales* default_instance_;
};
// -------------------------------------------------------------------

class Document_Requests : public ::google::protobuf::Message {
 public:
  Document_Requests();
  virtual ~Document_Requests();
  
  Document_Requests(const Document_Requests& from);
  
  inline Document_Requests& operator=(const Document_Requests& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Document_Requests& default_instance();
  
  void Swap(Document_Requests* other);
  
  // implements Message ----------------------------------------------
  
  Document_Requests* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document_Requests& from);
  void MergeFrom(const Document_Requests& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 RequestID = 21;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestIDFieldNumber = 21;
  inline ::google::protobuf::int64 requestid() const;
  inline void set_requestid(::google::protobuf::int64 value);
  
  // required int64 RequestTime = 22;
  inline bool has_requesttime() const;
  inline void clear_requesttime();
  static const int kRequestTimeFieldNumber = 22;
  inline ::google::protobuf::int64 requesttime() const;
  inline void set_requesttime(::google::protobuf::int64 value);
  
  // required int64 ResponseTime = 23;
  inline bool has_responsetime() const;
  inline void clear_responsetime();
  static const int kResponseTimeFieldNumber = 23;
  inline ::google::protobuf::int64 responsetime() const;
  inline void set_responsetime(::google::protobuf::int64 value);
  
  // required string URL = 24;
  inline bool has_url() const;
  inline void clear_url();
  static const int kURLFieldNumber = 24;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // required string RequestData = 25;
  inline bool has_requestdata() const;
  inline void clear_requestdata();
  static const int kRequestDataFieldNumber = 25;
  inline const ::std::string& requestdata() const;
  inline void set_requestdata(const ::std::string& value);
  inline void set_requestdata(const char* value);
  inline void set_requestdata(const char* value, size_t size);
  inline ::std::string* mutable_requestdata();
  inline ::std::string* release_requestdata();
  
  // @@protoc_insertion_point(class_scope:Document.Requests)
 private:
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_requesttime();
  inline void clear_has_requesttime();
  inline void set_has_responsetime();
  inline void clear_has_responsetime();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_requestdata();
  inline void clear_has_requestdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 requestid_;
  ::google::protobuf::int64 requesttime_;
  ::google::protobuf::int64 responsetime_;
  ::std::string* url_;
  ::std::string* requestdata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_epaper_2eproto();
  friend void protobuf_AssignDesc_epaper_2eproto();
  friend void protobuf_ShutdownFile_epaper_2eproto();
  
  void InitAsDefaultInstance();
  static Document_Requests* default_instance_;
};
// -------------------------------------------------------------------

class Document : public ::google::protobuf::Message {
 public:
  Document();
  virtual ~Document();
  
  Document(const Document& from);
  
  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();
  
  void Swap(Document* other);
  
  // implements Message ----------------------------------------------
  
  Document* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Document_Links Links;
  typedef Document_Name Name;
  typedef Document_Sales Sales;
  typedef Document_Requests Requests;
  
  // accessors -------------------------------------------------------
  
  // required int64 DocId = 1;
  inline bool has_docid() const;
  inline void clear_docid();
  static const int kDocIdFieldNumber = 1;
  inline ::google::protobuf::int64 docid() const;
  inline void set_docid(::google::protobuf::int64 value);
  
  // optional group Links = 2 {
  inline bool has_links() const;
  inline void clear_links();
  static const int kLinksFieldNumber = 2;
  inline const ::Document_Links& links() const;
  inline ::Document_Links* mutable_links();
  inline ::Document_Links* release_links();
  
  // repeated group Name = 5 {
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::Document_Name& name(int index) const;
  inline ::Document_Name* mutable_name(int index);
  inline ::Document_Name* add_name();
  inline const ::google::protobuf::RepeatedPtrField< ::Document_Name >&
      name() const;
  inline ::google::protobuf::RepeatedPtrField< ::Document_Name >*
      mutable_name();
  
  // required int64 SessionID = 10;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIDFieldNumber = 10;
  inline ::google::protobuf::int64 sessionid() const;
  inline void set_sessionid(::google::protobuf::int64 value);
  
  // required int64 UserID = 11;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 11;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);
  
  // required int64 UserGroup = 12;
  inline bool has_usergroup() const;
  inline void clear_usergroup();
  static const int kUserGroupFieldNumber = 12;
  inline ::google::protobuf::int64 usergroup() const;
  inline void set_usergroup(::google::protobuf::int64 value);
  
  // required int32 clientIP = 13;
  inline bool has_clientip() const;
  inline void clear_clientip();
  static const int kClientIPFieldNumber = 13;
  inline ::google::protobuf::int32 clientip() const;
  inline void set_clientip(::google::protobuf::int32 value);
  
  // optional string country = 14;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 14;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  
  // optional string Agent = 15;
  inline bool has_agent() const;
  inline void clear_agent();
  static const int kAgentFieldNumber = 15;
  inline const ::std::string& agent() const;
  inline void set_agent(const ::std::string& value);
  inline void set_agent(const char* value);
  inline void set_agent(const char* value, size_t size);
  inline ::std::string* mutable_agent();
  inline ::std::string* release_agent();
  
  // optional group Sales = 16 {
  inline bool has_sales() const;
  inline void clear_sales();
  static const int kSalesFieldNumber = 16;
  inline const ::Document_Sales& sales() const;
  inline ::Document_Sales* mutable_sales();
  inline ::Document_Sales* release_sales();
  
  // repeated group Requests = 20 {
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 20;
  inline const ::Document_Requests& requests(int index) const;
  inline ::Document_Requests* mutable_requests(int index);
  inline ::Document_Requests* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::Document_Requests >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::Document_Requests >*
      mutable_requests();
  
  // @@protoc_insertion_point(class_scope:Document)
 private:
  inline void set_has_docid();
  inline void clear_has_docid();
  inline void set_has_links();
  inline void clear_has_links();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_usergroup();
  inline void clear_has_usergroup();
  inline void set_has_clientip();
  inline void clear_has_clientip();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_agent();
  inline void clear_has_agent();
  inline void set_has_sales();
  inline void clear_has_sales();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 docid_;
  ::Document_Links* links_;
  ::google::protobuf::RepeatedPtrField< ::Document_Name > name_;
  ::google::protobuf::int64 sessionid_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int64 usergroup_;
  ::std::string* country_;
  ::std::string* agent_;
  ::Document_Sales* sales_;
  ::google::protobuf::RepeatedPtrField< ::Document_Requests > requests_;
  ::google::protobuf::int32 clientip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_epaper_2eproto();
  friend void protobuf_AssignDesc_epaper_2eproto();
  friend void protobuf_ShutdownFile_epaper_2eproto();
  
  void InitAsDefaultInstance();
  static Document* default_instance_;
};
// ===================================================================


// ===================================================================

// Document_Links

// repeated int64 Backward = 3;
inline int Document_Links::backward_size() const {
  return backward_.size();
}
inline void Document_Links::clear_backward() {
  backward_.Clear();
}
inline ::google::protobuf::int64 Document_Links::backward(int index) const {
  return backward_.Get(index);
}
inline void Document_Links::set_backward(int index, ::google::protobuf::int64 value) {
  backward_.Set(index, value);
}
inline void Document_Links::add_backward(::google::protobuf::int64 value) {
  backward_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Document_Links::backward() const {
  return backward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Document_Links::mutable_backward() {
  return &backward_;
}

// repeated int64 Forward = 4;
inline int Document_Links::forward_size() const {
  return forward_.size();
}
inline void Document_Links::clear_forward() {
  forward_.Clear();
}
inline ::google::protobuf::int64 Document_Links::forward(int index) const {
  return forward_.Get(index);
}
inline void Document_Links::set_forward(int index, ::google::protobuf::int64 value) {
  forward_.Set(index, value);
}
inline void Document_Links::add_forward(::google::protobuf::int64 value) {
  forward_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Document_Links::forward() const {
  return forward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Document_Links::mutable_forward() {
  return &forward_;
}

// -------------------------------------------------------------------

// Document_Name_Language

// required string Code = 7;
inline bool Document_Name_Language::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document_Name_Language::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document_Name_Language::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document_Name_Language::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& Document_Name_Language::code() const {
  return *code_;
}
inline void Document_Name_Language::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void Document_Name_Language::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void Document_Name_Language::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document_Name_Language::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* Document_Name_Language::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Country = 8;
inline bool Document_Name_Language::has_country() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document_Name_Language::set_has_country() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document_Name_Language::clear_has_country() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document_Name_Language::clear_country() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& Document_Name_Language::country() const {
  return *country_;
}
inline void Document_Name_Language::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void Document_Name_Language::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void Document_Name_Language::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document_Name_Language::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  return country_;
}
inline ::std::string* Document_Name_Language::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Document_Name

// repeated group Language = 6 {
inline int Document_Name::language_size() const {
  return language_.size();
}
inline void Document_Name::clear_language() {
  language_.Clear();
}
inline const ::Document_Name_Language& Document_Name::language(int index) const {
  return language_.Get(index);
}
inline ::Document_Name_Language* Document_Name::mutable_language(int index) {
  return language_.Mutable(index);
}
inline ::Document_Name_Language* Document_Name::add_language() {
  return language_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Document_Name_Language >&
Document_Name::language() const {
  return language_;
}
inline ::google::protobuf::RepeatedPtrField< ::Document_Name_Language >*
Document_Name::mutable_language() {
  return &language_;
}

// optional string Url = 9;
inline bool Document_Name::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document_Name::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document_Name::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document_Name::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& Document_Name::url() const {
  return *url_;
}
inline void Document_Name::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Document_Name::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Document_Name::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document_Name::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* Document_Name::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Document_Sales

// required int32 productId = 17;
inline bool Document_Sales::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document_Sales::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document_Sales::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document_Sales::clear_productid() {
  productid_ = 0;
  clear_has_productid();
}
inline ::google::protobuf::int32 Document_Sales::productid() const {
  return productid_;
}
inline void Document_Sales::set_productid(::google::protobuf::int32 value) {
  set_has_productid();
  productid_ = value;
}

// required string productName = 18;
inline bool Document_Sales::has_productname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document_Sales::set_has_productname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document_Sales::clear_has_productname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document_Sales::clear_productname() {
  if (productname_ != &::google::protobuf::internal::kEmptyString) {
    productname_->clear();
  }
  clear_has_productname();
}
inline const ::std::string& Document_Sales::productname() const {
  return *productname_;
}
inline void Document_Sales::set_productname(const ::std::string& value) {
  set_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    productname_ = new ::std::string;
  }
  productname_->assign(value);
}
inline void Document_Sales::set_productname(const char* value) {
  set_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    productname_ = new ::std::string;
  }
  productname_->assign(value);
}
inline void Document_Sales::set_productname(const char* value, size_t size) {
  set_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    productname_ = new ::std::string;
  }
  productname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document_Sales::mutable_productname() {
  set_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    productname_ = new ::std::string;
  }
  return productname_;
}
inline ::std::string* Document_Sales::release_productname() {
  clear_has_productname();
  if (productname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productname_;
    productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 sale = 19;
inline bool Document_Sales::has_sale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Document_Sales::set_has_sale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Document_Sales::clear_has_sale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Document_Sales::clear_sale() {
  sale_ = 0;
  clear_has_sale();
}
inline ::google::protobuf::int32 Document_Sales::sale() const {
  return sale_;
}
inline void Document_Sales::set_sale(::google::protobuf::int32 value) {
  set_has_sale();
  sale_ = value;
}

// -------------------------------------------------------------------

// Document_Requests

// required int64 RequestID = 21;
inline bool Document_Requests::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document_Requests::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document_Requests::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document_Requests::clear_requestid() {
  requestid_ = GOOGLE_LONGLONG(0);
  clear_has_requestid();
}
inline ::google::protobuf::int64 Document_Requests::requestid() const {
  return requestid_;
}
inline void Document_Requests::set_requestid(::google::protobuf::int64 value) {
  set_has_requestid();
  requestid_ = value;
}

// required int64 RequestTime = 22;
inline bool Document_Requests::has_requesttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document_Requests::set_has_requesttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document_Requests::clear_has_requesttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document_Requests::clear_requesttime() {
  requesttime_ = GOOGLE_LONGLONG(0);
  clear_has_requesttime();
}
inline ::google::protobuf::int64 Document_Requests::requesttime() const {
  return requesttime_;
}
inline void Document_Requests::set_requesttime(::google::protobuf::int64 value) {
  set_has_requesttime();
  requesttime_ = value;
}

// required int64 ResponseTime = 23;
inline bool Document_Requests::has_responsetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Document_Requests::set_has_responsetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Document_Requests::clear_has_responsetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Document_Requests::clear_responsetime() {
  responsetime_ = GOOGLE_LONGLONG(0);
  clear_has_responsetime();
}
inline ::google::protobuf::int64 Document_Requests::responsetime() const {
  return responsetime_;
}
inline void Document_Requests::set_responsetime(::google::protobuf::int64 value) {
  set_has_responsetime();
  responsetime_ = value;
}

// required string URL = 24;
inline bool Document_Requests::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Document_Requests::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Document_Requests::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Document_Requests::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& Document_Requests::url() const {
  return *url_;
}
inline void Document_Requests::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Document_Requests::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Document_Requests::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document_Requests::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* Document_Requests::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string RequestData = 25;
inline bool Document_Requests::has_requestdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Document_Requests::set_has_requestdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Document_Requests::clear_has_requestdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Document_Requests::clear_requestdata() {
  if (requestdata_ != &::google::protobuf::internal::kEmptyString) {
    requestdata_->clear();
  }
  clear_has_requestdata();
}
inline const ::std::string& Document_Requests::requestdata() const {
  return *requestdata_;
}
inline void Document_Requests::set_requestdata(const ::std::string& value) {
  set_has_requestdata();
  if (requestdata_ == &::google::protobuf::internal::kEmptyString) {
    requestdata_ = new ::std::string;
  }
  requestdata_->assign(value);
}
inline void Document_Requests::set_requestdata(const char* value) {
  set_has_requestdata();
  if (requestdata_ == &::google::protobuf::internal::kEmptyString) {
    requestdata_ = new ::std::string;
  }
  requestdata_->assign(value);
}
inline void Document_Requests::set_requestdata(const char* value, size_t size) {
  set_has_requestdata();
  if (requestdata_ == &::google::protobuf::internal::kEmptyString) {
    requestdata_ = new ::std::string;
  }
  requestdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document_Requests::mutable_requestdata() {
  set_has_requestdata();
  if (requestdata_ == &::google::protobuf::internal::kEmptyString) {
    requestdata_ = new ::std::string;
  }
  return requestdata_;
}
inline ::std::string* Document_Requests::release_requestdata() {
  clear_has_requestdata();
  if (requestdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestdata_;
    requestdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Document

// required int64 DocId = 1;
inline bool Document::has_docid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document::set_has_docid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document::clear_has_docid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document::clear_docid() {
  docid_ = GOOGLE_LONGLONG(0);
  clear_has_docid();
}
inline ::google::protobuf::int64 Document::docid() const {
  return docid_;
}
inline void Document::set_docid(::google::protobuf::int64 value) {
  set_has_docid();
  docid_ = value;
}

// optional group Links = 2 {
inline bool Document::has_links() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document::set_has_links() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document::clear_has_links() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document::clear_links() {
  if (links_ != NULL) links_->::Document_Links::Clear();
  clear_has_links();
}
inline const ::Document_Links& Document::links() const {
  return links_ != NULL ? *links_ : *default_instance_->links_;
}
inline ::Document_Links* Document::mutable_links() {
  set_has_links();
  if (links_ == NULL) links_ = new ::Document_Links;
  return links_;
}
inline ::Document_Links* Document::release_links() {
  clear_has_links();
  ::Document_Links* temp = links_;
  links_ = NULL;
  return temp;
}

// repeated group Name = 5 {
inline int Document::name_size() const {
  return name_.size();
}
inline void Document::clear_name() {
  name_.Clear();
}
inline const ::Document_Name& Document::name(int index) const {
  return name_.Get(index);
}
inline ::Document_Name* Document::mutable_name(int index) {
  return name_.Mutable(index);
}
inline ::Document_Name* Document::add_name() {
  return name_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Document_Name >&
Document::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::Document_Name >*
Document::mutable_name() {
  return &name_;
}

// required int64 SessionID = 10;
inline bool Document::has_sessionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Document::set_has_sessionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Document::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Document::clear_sessionid() {
  sessionid_ = GOOGLE_LONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::int64 Document::sessionid() const {
  return sessionid_;
}
inline void Document::set_sessionid(::google::protobuf::int64 value) {
  set_has_sessionid();
  sessionid_ = value;
}

// required int64 UserID = 11;
inline bool Document::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Document::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Document::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Document::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 Document::userid() const {
  return userid_;
}
inline void Document::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// required int64 UserGroup = 12;
inline bool Document::has_usergroup() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Document::set_has_usergroup() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Document::clear_has_usergroup() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Document::clear_usergroup() {
  usergroup_ = GOOGLE_LONGLONG(0);
  clear_has_usergroup();
}
inline ::google::protobuf::int64 Document::usergroup() const {
  return usergroup_;
}
inline void Document::set_usergroup(::google::protobuf::int64 value) {
  set_has_usergroup();
  usergroup_ = value;
}

// required int32 clientIP = 13;
inline bool Document::has_clientip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Document::set_has_clientip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Document::clear_has_clientip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Document::clear_clientip() {
  clientip_ = 0;
  clear_has_clientip();
}
inline ::google::protobuf::int32 Document::clientip() const {
  return clientip_;
}
inline void Document::set_clientip(::google::protobuf::int32 value) {
  set_has_clientip();
  clientip_ = value;
}

// optional string country = 14;
inline bool Document::has_country() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Document::set_has_country() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Document::clear_has_country() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Document::clear_country() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& Document::country() const {
  return *country_;
}
inline void Document::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void Document::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void Document::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  return country_;
}
inline ::std::string* Document::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Agent = 15;
inline bool Document::has_agent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Document::set_has_agent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Document::clear_has_agent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Document::clear_agent() {
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    agent_->clear();
  }
  clear_has_agent();
}
inline const ::std::string& Document::agent() const {
  return *agent_;
}
inline void Document::set_agent(const ::std::string& value) {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::kEmptyString) {
    agent_ = new ::std::string;
  }
  agent_->assign(value);
}
inline void Document::set_agent(const char* value) {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::kEmptyString) {
    agent_ = new ::std::string;
  }
  agent_->assign(value);
}
inline void Document::set_agent(const char* value, size_t size) {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::kEmptyString) {
    agent_ = new ::std::string;
  }
  agent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Document::mutable_agent() {
  set_has_agent();
  if (agent_ == &::google::protobuf::internal::kEmptyString) {
    agent_ = new ::std::string;
  }
  return agent_;
}
inline ::std::string* Document::release_agent() {
  clear_has_agent();
  if (agent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = agent_;
    agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional group Sales = 16 {
inline bool Document::has_sales() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Document::set_has_sales() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Document::clear_has_sales() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Document::clear_sales() {
  if (sales_ != NULL) sales_->::Document_Sales::Clear();
  clear_has_sales();
}
inline const ::Document_Sales& Document::sales() const {
  return sales_ != NULL ? *sales_ : *default_instance_->sales_;
}
inline ::Document_Sales* Document::mutable_sales() {
  set_has_sales();
  if (sales_ == NULL) sales_ = new ::Document_Sales;
  return sales_;
}
inline ::Document_Sales* Document::release_sales() {
  clear_has_sales();
  ::Document_Sales* temp = sales_;
  sales_ = NULL;
  return temp;
}

// repeated group Requests = 20 {
inline int Document::requests_size() const {
  return requests_.size();
}
inline void Document::clear_requests() {
  requests_.Clear();
}
inline const ::Document_Requests& Document::requests(int index) const {
  return requests_.Get(index);
}
inline ::Document_Requests* Document::mutable_requests(int index) {
  return requests_.Mutable(index);
}
inline ::Document_Requests* Document::add_requests() {
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Document_Requests >&
Document::requests() const {
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::Document_Requests >*
Document::mutable_requests() {
  return &requests_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_epaper_2eproto__INCLUDED
