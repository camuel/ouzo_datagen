// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "epaper.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Document_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_reflection_ = NULL;
const ::google::protobuf::Descriptor* Document_Links_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_Links_reflection_ = NULL;
const ::google::protobuf::Descriptor* Document_Name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_Name_reflection_ = NULL;
const ::google::protobuf::Descriptor* Document_Name_Language_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_Name_Language_reflection_ = NULL;
const ::google::protobuf::Descriptor* Document_Sales_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_Sales_reflection_ = NULL;
const ::google::protobuf::Descriptor* Document_Requests_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_Requests_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_epaper_2eproto() {
  protobuf_AddDesc_epaper_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "epaper.proto");
  GOOGLE_CHECK(file != NULL);
  Document_descriptor_ = file->message_type(0);
  static const int Document_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, docid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, usergroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, clientip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, sales_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, requests_),
  };
  Document_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Document_descriptor_,
      Document::default_instance_,
      Document_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Document));
  Document_Links_descriptor_ = Document_descriptor_->nested_type(0);
  static const int Document_Links_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Links, backward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Links, forward_),
  };
  Document_Links_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Document_Links_descriptor_,
      Document_Links::default_instance_,
      Document_Links_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Links, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Links, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Document_Links));
  Document_Name_descriptor_ = Document_descriptor_->nested_type(1);
  static const int Document_Name_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name, url_),
  };
  Document_Name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Document_Name_descriptor_,
      Document_Name::default_instance_,
      Document_Name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Document_Name));
  Document_Name_Language_descriptor_ = Document_Name_descriptor_->nested_type(0);
  static const int Document_Name_Language_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name_Language, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name_Language, country_),
  };
  Document_Name_Language_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Document_Name_Language_descriptor_,
      Document_Name_Language::default_instance_,
      Document_Name_Language_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name_Language, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name_Language, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Document_Name_Language));
  Document_Sales_descriptor_ = Document_descriptor_->nested_type(2);
  static const int Document_Sales_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Sales, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Sales, productname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Sales, sale_),
  };
  Document_Sales_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Document_Sales_descriptor_,
      Document_Sales::default_instance_,
      Document_Sales_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Sales, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Sales, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Document_Sales));
  Document_Requests_descriptor_ = Document_descriptor_->nested_type(3);
  static const int Document_Requests_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Requests, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Requests, requesttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Requests, responsetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Requests, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Requests, requestdata_),
  };
  Document_Requests_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Document_Requests_descriptor_,
      Document_Requests::default_instance_,
      Document_Requests_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Requests, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Requests, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Document_Requests));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_epaper_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Document_descriptor_, &Document::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Document_Links_descriptor_, &Document_Links::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Document_Name_descriptor_, &Document_Name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Document_Name_Language_descriptor_, &Document_Name_Language::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Document_Sales_descriptor_, &Document_Sales::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Document_Requests_descriptor_, &Document_Requests::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_epaper_2eproto() {
  delete Document::default_instance_;
  delete Document_reflection_;
  delete Document_Links::default_instance_;
  delete Document_Links_reflection_;
  delete Document_Name::default_instance_;
  delete Document_Name_reflection_;
  delete Document_Name_Language::default_instance_;
  delete Document_Name_Language_reflection_;
  delete Document_Sales::default_instance_;
  delete Document_Sales_reflection_;
  delete Document_Requests::default_instance_;
  delete Document_Requests_reflection_;
}

void protobuf_AddDesc_epaper_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014epaper.proto\"\307\004\n\010Document\022\r\n\005DocId\030\001 \002"
    "(\003\022\036\n\005links\030\002 \001(\n2\017.Document.Links\022\034\n\004na"
    "me\030\005 \003(\n2\016.Document.Name\022\021\n\tSessionID\030\n "
    "\002(\003\022\016\n\006UserID\030\013 \002(\003\022\021\n\tUserGroup\030\014 \002(\003\022\020"
    "\n\010clientIP\030\r \002(\005\022\017\n\007country\030\016 \001(\t\022\r\n\005Age"
    "nt\030\017 \001(\t\022\036\n\005sales\030\020 \001(\n2\017.Document.Sales"
    "\022$\n\010requests\030\024 \003(\n2\022.Document.Requests\032*"
    "\n\005Links\022\020\n\010Backward\030\003 \003(\003\022\017\n\007Forward\030\004 \003"
    "(\003\032i\n\004Name\022)\n\010language\030\006 \003(\n2\027.Document."
    "Name.Language\022\013\n\003Url\030\t \001(\t\032)\n\010Language\022\014"
    "\n\004Code\030\007 \002(\t\022\017\n\007Country\030\010 \001(\t\032=\n\005Sales\022\021"
    "\n\tproductId\030\021 \002(\005\022\023\n\013productName\030\022 \002(\t\022\014"
    "\n\004sale\030\023 \002(\005\032j\n\010Requests\022\021\n\tRequestID\030\025 "
    "\002(\003\022\023\n\013RequestTime\030\026 \002(\003\022\024\n\014ResponseTime"
    "\030\027 \002(\003\022\013\n\003URL\030\030 \002(\t\022\023\n\013RequestData\030\031 \002(\t", 600);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "epaper.proto", &protobuf_RegisterTypes);
  Document::default_instance_ = new Document();
  Document_Links::default_instance_ = new Document_Links();
  Document_Name::default_instance_ = new Document_Name();
  Document_Name_Language::default_instance_ = new Document_Name_Language();
  Document_Sales::default_instance_ = new Document_Sales();
  Document_Requests::default_instance_ = new Document_Requests();
  Document::default_instance_->InitAsDefaultInstance();
  Document_Links::default_instance_->InitAsDefaultInstance();
  Document_Name::default_instance_->InitAsDefaultInstance();
  Document_Name_Language::default_instance_->InitAsDefaultInstance();
  Document_Sales::default_instance_->InitAsDefaultInstance();
  Document_Requests::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_epaper_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_epaper_2eproto {
  StaticDescriptorInitializer_epaper_2eproto() {
    protobuf_AddDesc_epaper_2eproto();
  }
} static_descriptor_initializer_epaper_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Document_Links::kBackwardFieldNumber;
const int Document_Links::kForwardFieldNumber;
#endif  // !_MSC_VER

Document_Links::Document_Links()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Document_Links::InitAsDefaultInstance() {
}

Document_Links::Document_Links(const Document_Links& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Document_Links::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document_Links::~Document_Links() {
  SharedDtor();
}

void Document_Links::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Document_Links::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document_Links::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_Links_descriptor_;
}

const Document_Links& Document_Links::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_epaper_2eproto();  return *default_instance_;
}

Document_Links* Document_Links::default_instance_ = NULL;

Document_Links* Document_Links::New() const {
  return new Document_Links;
}

void Document_Links::Clear() {
  backward_.Clear();
  forward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Document_Links::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 Backward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Backward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_backward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_backward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Backward;
        if (input->ExpectTag(32)) goto parse_Forward;
        break;
      }
      
      // repeated int64 Forward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Forward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_forward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_forward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Forward;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Document_Links::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 Backward = 3;
  for (int i = 0; i < this->backward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->backward(i), output);
  }
  
  // repeated int64 Forward = 4;
  for (int i = 0; i < this->forward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->forward(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Document_Links::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 Backward = 3;
  for (int i = 0; i < this->backward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->backward(i), target);
  }
  
  // repeated int64 Forward = 4;
  for (int i = 0; i < this->forward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->forward(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Document_Links::ByteSize() const {
  int total_size = 0;
  
  // repeated int64 Backward = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->backward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->backward(i));
    }
    total_size += 1 * this->backward_size() + data_size;
  }
  
  // repeated int64 Forward = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->forward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->forward(i));
    }
    total_size += 1 * this->forward_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document_Links::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Document_Links* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Document_Links*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Document_Links::MergeFrom(const Document_Links& from) {
  GOOGLE_CHECK_NE(&from, this);
  backward_.MergeFrom(from.backward_);
  forward_.MergeFrom(from.forward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Document_Links::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document_Links::CopyFrom(const Document_Links& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document_Links::IsInitialized() const {
  
  return true;
}

void Document_Links::Swap(Document_Links* other) {
  if (other != this) {
    backward_.Swap(&other->backward_);
    forward_.Swap(&other->forward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Document_Links::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_Links_descriptor_;
  metadata.reflection = Document_Links_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Document_Name_Language::kCodeFieldNumber;
const int Document_Name_Language::kCountryFieldNumber;
#endif  // !_MSC_VER

Document_Name_Language::Document_Name_Language()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Document_Name_Language::InitAsDefaultInstance() {
}

Document_Name_Language::Document_Name_Language(const Document_Name_Language& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Document_Name_Language::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document_Name_Language::~Document_Name_Language() {
  SharedDtor();
}

void Document_Name_Language::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (this != default_instance_) {
  }
}

void Document_Name_Language::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document_Name_Language::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_Name_Language_descriptor_;
}

const Document_Name_Language& Document_Name_Language::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_epaper_2eproto();  return *default_instance_;
}

Document_Name_Language* Document_Name_Language::default_instance_ = NULL;

Document_Name_Language* Document_Name_Language::New() const {
  return new Document_Name_Language;
}

void Document_Name_Language::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Document_Name_Language::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Code = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Country;
        break;
      }
      
      // optional string Country = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Document_Name_Language::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Code = 7;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->code(), output);
  }
  
  // optional string Country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->country(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Document_Name_Language::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Code = 7;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->code(), target);
  }
  
  // optional string Country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->country(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Document_Name_Language::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Code = 7;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
    // optional string Country = 8;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document_Name_Language::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Document_Name_Language* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Document_Name_Language*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Document_Name_Language::MergeFrom(const Document_Name_Language& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Document_Name_Language::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document_Name_Language::CopyFrom(const Document_Name_Language& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document_Name_Language::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Document_Name_Language::Swap(Document_Name_Language* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(country_, other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Document_Name_Language::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_Name_Language_descriptor_;
  metadata.reflection = Document_Name_Language_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Document_Name::kLanguageFieldNumber;
const int Document_Name::kUrlFieldNumber;
#endif  // !_MSC_VER

Document_Name::Document_Name()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Document_Name::InitAsDefaultInstance() {
}

Document_Name::Document_Name(const Document_Name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Document_Name::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document_Name::~Document_Name() {
  SharedDtor();
}

void Document_Name::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void Document_Name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document_Name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_Name_descriptor_;
}

const Document_Name& Document_Name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_epaper_2eproto();  return *default_instance_;
}

Document_Name* Document_Name::default_instance_ = NULL;

Document_Name* Document_Name::New() const {
  return new Document_Name;
}

void Document_Name::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  language_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Document_Name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated group Language = 6 {
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                6, input, add_language()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(51)) goto parse_language;
        if (input->ExpectTag(74)) goto parse_Url;
        break;
      }
      
      // optional string Url = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Document_Name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated group Language = 6 {
  for (int i = 0; i < this->language_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      6, this->language(i), output);
  }
  
  // optional string Url = 9;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Document_Name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated group Language = 6 {
  for (int i = 0; i < this->language_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        6, this->language(i), target);
  }
  
  // optional string Url = 9;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Document_Name::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string Url = 9;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
  }
  // repeated group Language = 6 {
  total_size += 2 * this->language_size();
  for (int i = 0; i < this->language_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->language(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document_Name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Document_Name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Document_Name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Document_Name::MergeFrom(const Document_Name& from) {
  GOOGLE_CHECK_NE(&from, this);
  language_.MergeFrom(from.language_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Document_Name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document_Name::CopyFrom(const Document_Name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document_Name::IsInitialized() const {
  
  for (int i = 0; i < language_size(); i++) {
    if (!this->language(i).IsInitialized()) return false;
  }
  return true;
}

void Document_Name::Swap(Document_Name* other) {
  if (other != this) {
    language_.Swap(&other->language_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Document_Name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_Name_descriptor_;
  metadata.reflection = Document_Name_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Document_Sales::kProductIdFieldNumber;
const int Document_Sales::kProductNameFieldNumber;
const int Document_Sales::kSaleFieldNumber;
#endif  // !_MSC_VER

Document_Sales::Document_Sales()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Document_Sales::InitAsDefaultInstance() {
}

Document_Sales::Document_Sales(const Document_Sales& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Document_Sales::SharedCtor() {
  _cached_size_ = 0;
  productid_ = 0;
  productname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document_Sales::~Document_Sales() {
  SharedDtor();
}

void Document_Sales::SharedDtor() {
  if (productname_ != &::google::protobuf::internal::kEmptyString) {
    delete productname_;
  }
  if (this != default_instance_) {
  }
}

void Document_Sales::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document_Sales::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_Sales_descriptor_;
}

const Document_Sales& Document_Sales::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_epaper_2eproto();  return *default_instance_;
}

Document_Sales* Document_Sales::default_instance_ = NULL;

Document_Sales* Document_Sales::New() const {
  return new Document_Sales;
}

void Document_Sales::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    productid_ = 0;
    if (has_productname()) {
      if (productname_ != &::google::protobuf::internal::kEmptyString) {
        productname_->clear();
      }
    }
    sale_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Document_Sales::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 productId = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_productName;
        break;
      }
      
      // required string productName = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productname().data(), this->productname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_sale;
        break;
      }
      
      // required int32 sale = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sale_)));
          set_has_sale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Document_Sales::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 productId = 17;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->productid(), output);
  }
  
  // required string productName = 18;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->productname(), output);
  }
  
  // required int32 sale = 19;
  if (has_sale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->sale(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Document_Sales::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 productId = 17;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->productid(), target);
  }
  
  // required string productName = 18;
  if (has_productname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productname().data(), this->productname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->productname(), target);
  }
  
  // required int32 sale = 19;
  if (has_sale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->sale(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Document_Sales::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 productId = 17;
    if (has_productid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productid());
    }
    
    // required string productName = 18;
    if (has_productname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productname());
    }
    
    // required int32 sale = 19;
    if (has_sale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sale());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document_Sales::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Document_Sales* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Document_Sales*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Document_Sales::MergeFrom(const Document_Sales& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_productname()) {
      set_productname(from.productname());
    }
    if (from.has_sale()) {
      set_sale(from.sale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Document_Sales::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document_Sales::CopyFrom(const Document_Sales& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document_Sales::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Document_Sales::Swap(Document_Sales* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    std::swap(productname_, other->productname_);
    std::swap(sale_, other->sale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Document_Sales::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_Sales_descriptor_;
  metadata.reflection = Document_Sales_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Document_Requests::kRequestIDFieldNumber;
const int Document_Requests::kRequestTimeFieldNumber;
const int Document_Requests::kResponseTimeFieldNumber;
const int Document_Requests::kURLFieldNumber;
const int Document_Requests::kRequestDataFieldNumber;
#endif  // !_MSC_VER

Document_Requests::Document_Requests()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Document_Requests::InitAsDefaultInstance() {
}

Document_Requests::Document_Requests(const Document_Requests& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Document_Requests::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = GOOGLE_LONGLONG(0);
  requesttime_ = GOOGLE_LONGLONG(0);
  responsetime_ = GOOGLE_LONGLONG(0);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document_Requests::~Document_Requests() {
  SharedDtor();
}

void Document_Requests::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (requestdata_ != &::google::protobuf::internal::kEmptyString) {
    delete requestdata_;
  }
  if (this != default_instance_) {
  }
}

void Document_Requests::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document_Requests::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_Requests_descriptor_;
}

const Document_Requests& Document_Requests::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_epaper_2eproto();  return *default_instance_;
}

Document_Requests* Document_Requests::default_instance_ = NULL;

Document_Requests* Document_Requests::New() const {
  return new Document_Requests;
}

void Document_Requests::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = GOOGLE_LONGLONG(0);
    requesttime_ = GOOGLE_LONGLONG(0);
    responsetime_ = GOOGLE_LONGLONG(0);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_requestdata()) {
      if (requestdata_ != &::google::protobuf::internal::kEmptyString) {
        requestdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Document_Requests::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 RequestID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_RequestTime;
        break;
      }
      
      // required int64 RequestTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RequestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requesttime_)));
          set_has_requesttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_ResponseTime;
        break;
      }
      
      // required int64 ResponseTime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ResponseTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &responsetime_)));
          set_has_responsetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_URL;
        break;
      }
      
      // required string URL = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_URL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_RequestData;
        break;
      }
      
      // required string RequestData = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RequestData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestdata().data(), this->requestdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Document_Requests::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 RequestID = 21;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->requestid(), output);
  }
  
  // required int64 RequestTime = 22;
  if (has_requesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->requesttime(), output);
  }
  
  // required int64 ResponseTime = 23;
  if (has_responsetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->responsetime(), output);
  }
  
  // required string URL = 24;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->url(), output);
  }
  
  // required string RequestData = 25;
  if (has_requestdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestdata().data(), this->requestdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->requestdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Document_Requests::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 RequestID = 21;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->requestid(), target);
  }
  
  // required int64 RequestTime = 22;
  if (has_requesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->requesttime(), target);
  }
  
  // required int64 ResponseTime = 23;
  if (has_responsetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->responsetime(), target);
  }
  
  // required string URL = 24;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->url(), target);
  }
  
  // required string RequestData = 25;
  if (has_requestdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestdata().data(), this->requestdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->requestdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Document_Requests::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 RequestID = 21;
    if (has_requestid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->requestid());
    }
    
    // required int64 RequestTime = 22;
    if (has_requesttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->requesttime());
    }
    
    // required int64 ResponseTime = 23;
    if (has_responsetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->responsetime());
    }
    
    // required string URL = 24;
    if (has_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // required string RequestData = 25;
    if (has_requestdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document_Requests::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Document_Requests* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Document_Requests*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Document_Requests::MergeFrom(const Document_Requests& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_requesttime()) {
      set_requesttime(from.requesttime());
    }
    if (from.has_responsetime()) {
      set_responsetime(from.responsetime());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_requestdata()) {
      set_requestdata(from.requestdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Document_Requests::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document_Requests::CopyFrom(const Document_Requests& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document_Requests::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Document_Requests::Swap(Document_Requests* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(requesttime_, other->requesttime_);
    std::swap(responsetime_, other->responsetime_);
    std::swap(url_, other->url_);
    std::swap(requestdata_, other->requestdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Document_Requests::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_Requests_descriptor_;
  metadata.reflection = Document_Requests_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Document::kDocIdFieldNumber;
const int Document::kLinksFieldNumber;
const int Document::kNameFieldNumber;
const int Document::kSessionIDFieldNumber;
const int Document::kUserIDFieldNumber;
const int Document::kUserGroupFieldNumber;
const int Document::kClientIPFieldNumber;
const int Document::kCountryFieldNumber;
const int Document::kAgentFieldNumber;
const int Document::kSalesFieldNumber;
const int Document::kRequestsFieldNumber;
#endif  // !_MSC_VER

Document::Document()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Document::InitAsDefaultInstance() {
  links_ = const_cast< ::Document_Links*>(&::Document_Links::default_instance());
  sales_ = const_cast< ::Document_Sales*>(&::Document_Sales::default_instance());
}

Document::Document(const Document& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  docid_ = GOOGLE_LONGLONG(0);
  links_ = NULL;
  sessionid_ = GOOGLE_LONGLONG(0);
  userid_ = GOOGLE_LONGLONG(0);
  usergroup_ = GOOGLE_LONGLONG(0);
  clientip_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sales_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document::~Document() {
  SharedDtor();
}

void Document::SharedDtor() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (agent_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_;
  }
  if (this != default_instance_) {
    delete links_;
    delete sales_;
  }
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_descriptor_;
}

const Document& Document::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_epaper_2eproto();  return *default_instance_;
}

Document* Document::default_instance_ = NULL;

Document* Document::New() const {
  return new Document;
}

void Document::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    docid_ = GOOGLE_LONGLONG(0);
    if (has_links()) {
      if (links_ != NULL) links_->::Document_Links::Clear();
    }
    sessionid_ = GOOGLE_LONGLONG(0);
    userid_ = GOOGLE_LONGLONG(0);
    usergroup_ = GOOGLE_LONGLONG(0);
    clientip_ = 0;
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_agent()) {
      if (agent_ != &::google::protobuf::internal::kEmptyString) {
        agent_->clear();
      }
    }
    if (has_sales()) {
      if (sales_ != NULL) sales_->::Document_Sales::Clear();
    }
  }
  name_.Clear();
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 DocId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &docid_)));
          set_has_docid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(19)) goto parse_links;
        break;
      }
      
      // optional group Links = 2 {
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                2, input, mutable_links()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(43)) goto parse_name;
        break;
      }
      
      // repeated group Name = 5 {
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                5, input, add_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(43)) goto parse_name;
        if (input->ExpectTag(80)) goto parse_SessionID;
        break;
      }
      
      // required int64 SessionID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_UserID;
        break;
      }
      
      // required int64 UserID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_UserGroup;
        break;
      }
      
      // required int64 UserGroup = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usergroup_)));
          set_has_usergroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_clientIP;
        break;
      }
      
      // required int32 clientIP = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientip_)));
          set_has_clientip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_country;
        break;
      }
      
      // optional string country = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_Agent;
        break;
      }
      
      // optional string Agent = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent().data(), this->agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(131)) goto parse_sales;
        break;
      }
      
      // optional group Sales = 16 {
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_sales:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                16, input, mutable_sales()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(163)) goto parse_requests;
        break;
      }
      
      // repeated group Requests = 20 {
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                20, input, add_requests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(163)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 DocId = 1;
  if (has_docid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->docid(), output);
  }
  
  // optional group Links = 2 {
  if (has_links()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      2, this->links(), output);
  }
  
  // repeated group Name = 5 {
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      5, this->name(i), output);
  }
  
  // required int64 SessionID = 10;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->sessionid(), output);
  }
  
  // required int64 UserID = 11;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->userid(), output);
  }
  
  // required int64 UserGroup = 12;
  if (has_usergroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->usergroup(), output);
  }
  
  // required int32 clientIP = 13;
  if (has_clientip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->clientip(), output);
  }
  
  // optional string country = 14;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->country(), output);
  }
  
  // optional string Agent = 15;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->agent(), output);
  }
  
  // optional group Sales = 16 {
  if (has_sales()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      16, this->sales(), output);
  }
  
  // repeated group Requests = 20 {
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      20, this->requests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Document::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 DocId = 1;
  if (has_docid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->docid(), target);
  }
  
  // optional group Links = 2 {
  if (has_links()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        2, this->links(), target);
  }
  
  // repeated group Name = 5 {
  for (int i = 0; i < this->name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        5, this->name(i), target);
  }
  
  // required int64 SessionID = 10;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->sessionid(), target);
  }
  
  // required int64 UserID = 11;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->userid(), target);
  }
  
  // required int64 UserGroup = 12;
  if (has_usergroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->usergroup(), target);
  }
  
  // required int32 clientIP = 13;
  if (has_clientip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->clientip(), target);
  }
  
  // optional string country = 14;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->country(), target);
  }
  
  // optional string Agent = 15;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent().data(), this->agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->agent(), target);
  }
  
  // optional group Sales = 16 {
  if (has_sales()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        16, this->sales(), target);
  }
  
  // repeated group Requests = 20 {
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        20, this->requests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Document::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 DocId = 1;
    if (has_docid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->docid());
    }
    
    // optional group Links = 2 {
    if (has_links()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->links());
    }
    
    // required int64 SessionID = 10;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }
    
    // required int64 UserID = 11;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
    // required int64 UserGroup = 12;
    if (has_usergroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usergroup());
    }
    
    // required int32 clientIP = 13;
    if (has_clientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientip());
    }
    
    // optional string country = 14;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Agent = 15;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent());
    }
    
    // optional group Sales = 16 {
    if (has_sales()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->sales());
    }
    
  }
  // repeated group Name = 5 {
  total_size += 2 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->name(i));
  }
  
  // repeated group Requests = 20 {
  total_size += 4 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->requests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Document* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Document*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  requests_.MergeFrom(from.requests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_docid()) {
      set_docid(from.docid());
    }
    if (from.has_links()) {
      mutable_links()->::Document_Links::MergeFrom(from.links());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_usergroup()) {
      set_usergroup(from.usergroup());
    }
    if (from.has_clientip()) {
      set_clientip(from.clientip());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_sales()) {
      mutable_sales()->::Document_Sales::MergeFrom(from.sales());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000079) != 0x00000079) return false;
  
  for (int i = 0; i < name_size(); i++) {
    if (!this->name(i).IsInitialized()) return false;
  }
  if (has_sales()) {
    if (!this->sales().IsInitialized()) return false;
  }
  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

void Document::Swap(Document* other) {
  if (other != this) {
    std::swap(docid_, other->docid_);
    std::swap(links_, other->links_);
    name_.Swap(&other->name_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(userid_, other->userid_);
    std::swap(usergroup_, other->usergroup_);
    std::swap(clientip_, other->clientip_);
    std::swap(country_, other->country_);
    std::swap(agent_, other->agent_);
    std::swap(sales_, other->sales_);
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_descriptor_;
  metadata.reflection = Document_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
